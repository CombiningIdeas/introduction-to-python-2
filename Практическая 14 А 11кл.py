#№1

#1.	Используя метод Монте-Карло, приближённо определите значение числа пи
# (см. § 12 учебника). Запишите в таблицу полученные результаты при различных 
# значениях N:
# 1) N = 100; 2) N = 1000; 3) N = 10000; 4) N = 100000; 5) N = 1000000

#from random import random
#from random import *
import random

N = 1000000
M = 0

#random.rabdom() - выводит случайное число в диапозоне от [0;1), тоесть
#включая 0 но не включая 1. не всегда можно сделать многостроынй коментарий 
#с помощью многострочного литерала

for i in range(N):
    x = random.random()
    y = random.random()
    
    if x*x+y*y <= 1:
        M += 1
    else:
        print('\n', y, '\n')
        print('\n', x, '\n')
    
Pi = 4*M/N
print("PI =", Pi)

#1)при N = 100; отклонение: максимальное число Пи было 3.4
#2)при N = 1000; отклонение: максимальное число Пи было 3.224
#3)при N = 10000; отклонение: минимальное число Пи было 3.0992
#4)при N = 100000; отклонение: максимальное число Пи было 3.15512
#5)при N = 1000000; максимальное число Пи было 3.139428

PI = 3.1415926

newPi = 3.139428  #подставляем значения от 1 до 5 которые выше написаны
print("\nnewPi = ", newPi)


#b = abs(PI - Pi)/PI * 100
b = abs(PI - newPi)/PI * 100

print("Relative error in %: ", b, "%", sep = '')



#отклонения в процентах от настоящего числа Пи:

#1)при N = 100; b = 8.225363148614491%
#2)при N = 1000; b = 2.6231090562156316%
#3)при N = 10000; b = 1.349398391121748%
#4)при N = 100000; b = 0.43059052278134596%
#5)при N = 1000000; b = 0.06890135913867257%




pi = 3.141828# при N = 100000000